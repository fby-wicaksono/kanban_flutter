// Mocks generated by Mockito 5.3.2 from annotations
// in kanban_flutter_sample/test/test_util/mock/repository_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:kanban_flutter_sample/data/drift_client.dart' as _i2;
import 'package:kanban_flutter_sample/repository/task_repo.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAppDatabase_0 extends _i1.SmartFake implements _i2.AppDatabase {
  _FakeAppDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepo extends _i1.Mock implements _i3.TaskRepo {
  MockTaskRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AppDatabase get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeAppDatabase_0(
          this,
          Invocation.getter(#database),
        ),
      ) as _i2.AppDatabase);
  @override
  _i4.Future<int> addTask(_i2.TasksCompanion? tasksCompanion) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [tasksCompanion],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<List<_i2.Task>> getAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Task>>.value(<_i2.Task>[]),
      ) as _i4.Future<List<_i2.Task>>);
  @override
  _i4.Future<bool> updateTask(_i2.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<dynamic> deleteTask(_i2.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [task],
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
}
